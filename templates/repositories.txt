import { Service } from 'typedi';
import FormMapper from '../mappers/forms.mapper';
import FormEntity from '../entities/form.entity';
import FormModel from '@app/sequelize/models/form.model';
import { RepositoryPort } from '@shared/ddd/repository.port';

@Service()
export default class FormRepository implements RepositoryPort<FormEntity> {
  constructor(private formMapper: FormMapper) {}

  /** Finding a form aggregate from its main ID */
  async findOneById(id: string): Promise<FormEntity | null> {
    log.info({
      message: `Finding form ${id}.`,
    });

    const record = await FormModel.findOne({
      attributes: this.formAttributes,
      where: { id },
    });

    if (!record) {
      log.info({
        message: `Form ${id} not found.`,
      });

      return null;
    }

    const form = this.formMapper.toDomain(record);

    log.info({
      message: `Found form ${id}.`,
      form,
    });

    return form;
  }

  /**
   * Insert a form into the DB.
   */
  async insert(entity: FormEntity): Promise<void> {
    const formRecord = this.formMapper.toPersistence(entity);

    log.info({
      message: `Inserting form ${entity.id}.`,
    });

    formRecord.isNewRecord = true;
    await formRecord.save();

    log.info({
      message: `Inserted form ${entity.id}.`,
      formRecord,
    });
  }

  /**
   * Update a form into the DB.
   */
  async update(entity: FormEntity): Promise<void> {
    const formRecord = this.formMapper.toPersistence(entity);

    log.info({
      message: `Updating form ${entity.id}.`,
    });

    formRecord.isNewRecord = false;
    await formRecord.save();

    log.info({
      message: `Updated form ${entity.id}.`,
      formRecord,
    });
  }

  /**
   * Check if a name already exists.
   */
  async existsByName(name: string): Promise<boolean> {
    const formRecord = await FormModel.findOne({
      attributes: ['id'],
      where: { name },
    });

    return !!formRecord;
  }
}
