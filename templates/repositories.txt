import { Service } from 'typedi';
import {{.ModelName}}Mapper from '../mappers/{{.HypenCaseName}}.mapper';
import {{.ModelName}}Entity from '../entities/{{.HypenCaseName}}.entity';
import {{.ModelName}}Model from '@app/sequelize/models/{{.HypenCaseName}}.model';
import { RepositoryPort } from '@shared/ddd/repository.port';

@Service()
export default class {{.ModelName}}Repository implements RepositoryPort<{{.ModelName}}Entity> {
  constructor(private {{.LowerModelName}}Mapper: {{.ModelName}}Mapper) {}

  async findAll(): Promise<{{.ModelName}}Entity[]> {
    log.info({
      message: 'Fetching all {{.SentenceCaseName}}s',
    });

    const records = await {{.ModelName}}Model.findAll();

    const entities = records.map(record => this.{{.LowerModelName}}Mapper.toDomain(record));

    log.info({
      message: 'Fetched all {{.SentenceCaseName}}s',
    });

    return entities;
  }

  async findOneById(id: string): Promise<{{.ModelName}}Entity | null> {
    log.info({
      message: `Finding {{.ModelName}} ${id}.`,
    });

    const record = await {{.ModelName}}Model.findOne({
      where: { id },
    });

    if (!record) {
      log.info({
        message: `{{.SentenceCaseName}} ${id} not found.`,
      });

      return null;
    }

    const entity = this.{{.LowerModelName}}Mapper.toDomain(record);

    log.info({
      message: `Found {{.SentenceCaseName}} ${id}.`,
    });

    return entity;
  }

  /**
   * Insert a {{.ModelName}} into the DB.
   */
  async insert(entity: {{.ModelName}}Entity): Promise<void> {
    const {{.LowerModelName}}Record = this.{{.LowerModelName}}Mapper.toPersistence(entity);

    log.info({
      message: `Inserting {{.SentenceCaseName}} ${entity.id}.`,
    });

    {{.LowerModelName}}Record.isNewRecord = true;
    await {{.LowerModelName}}Record.save();

    log.info({
      message: `Inserted {{.SentenceCaseName}} ${entity.id}.`,
    });
  }

  /**
   * Update a {{.LowerModelName}} into the DB.
   */
  async update(entity: {{.ModelName}}Entity): Promise<void> {
    const {{.LowerModelName}}Record = this.{{.LowerModelName}}Mapper.toPersistence(entity);

    log.info({
      message: `Updating {{.SentenceCaseName}} ${entity.id}.`,
    });

    {{.LowerModelName}}Record.isNewRecord = false;
    await {{.LowerModelName}}Record.save();

    log.info({
      message: `Updated {{.SentenceCaseName}} ${entity.id}.`,
    });
  }

  /**
   * Saves a {{.ModelName}} record to the DB.
   */
  async save(entity: {{.ModelName}}Entity): Promise<void> {
    if (this.exists(entity.id)) {
      return await this.update(entity);
    }
    else {
      return await this.insert(entity);
    }
  }

  /**
   * Checks if a {{.ModelName}} exists in the DB.
  */
  public async exists (id: string): Promise<boolean> {
    const count = await {{.ModelName}}Model.count({
      where: { id },
    });

    return count > 0;
  }
}
