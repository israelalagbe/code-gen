import { Service } from 'typedi';
import {{.ModelName}}Mapper from '../mappers/{{.HypenCaseName}}.mapper';
import {{.ModelName}}Entity from '../entities/{{.HypenCaseName}}.entity';
import {{.ModelName}}Model from '../../models/{{.HypenCaseName}}.model';
import { RepositoryPort } from '@shared/ddd/repository.port';

@Service()
export default class {{.ModelName}}Repository implements RepositoryPort<{{.ModelName}}Entity> {
  constructor(private {{.LowerModelName}}Mapper: {{.ModelName}}Mapper) {}

  async findOneById(id: string): Promise<{{.ModelName}}Entity | null> {
    log.info({
      message: `Finding {{.ModelName}} ${id}.`,
    });

    const record = await {{.ModelName}}Model.findOne({
      where: { id },
    });

    if (!record) {
      log.info({
        message: `{{.ModelName}} ${id} not found.`,
      });

      return null;
    }

    const entity = this.{{.LowerModelName}}Mapper.toDomain(record);

    log.info({
      message: `Found {{.ModelName}} ${id}.`,
      entity,
    });

    return entity;
  }

  /**
   * Insert a {{.ModelName}} into the DB.
   */
  async insert(entity: {{.ModelName}}Entity): Promise<void> {
    const {{.LowerModelName}}Record = this.{{.LowerModelName}}Mapper.toPersistence(entity);

    log.info({
      message: `Inserting {{.ModelName}} ${entity.id}.`,
    });

    {{.LowerModelName}}Record.isNewRecord = true;
    await {{.LowerModelName}}Record.save();

    log.info({
      message: `Inserted {{.ModelName}} ${entity.id}.`,
      {{.LowerModelName}}Record,
    });
  }

  /**
   * Update a {{.LowerModelName}} into the DB.
   */
  async update(entity: {{.ModelName}}Entity): Promise<void> {
    const {{.LowerModelName}}Record = this.{{.LowerModelName}}Mapper.toPersistence(entity);

    log.info({
      message: `Updating {{.ModelName}} ${entity.id}.`,
    });

    {{.LowerModelName}}Record.isNewRecord = false;
    await {{.LowerModelName}}Record.save();

    log.info({
      message: `Updated {{.ModelName}} ${entity.id}.`,
      {{.LowerModelName}}Record,
    });
  }

  /**
   * Check if a name already exists.
   */
  async existsByName(name: string): Promise<boolean> {
    const {{.LowerModelName}}Record = await {{.ModelName}}Model.findOne({
      attributes: ['id'],
      where: { name },
    });

    return !!{{.LowerModelName}}Record;
  }
}
