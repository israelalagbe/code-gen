import { Body, Get, JsonController, NotFoundError, Param, Patch, Post, UseBefore } from 'routing-controllers';
import { Validate, RequestUser } from '@letsdeel/employee-tribe-common';
import { Service } from 'typedi';
import { Create{{.ModelName}}Dto, {{.ModelName}}Dto, Update{{.ModelName}}Dto, create{{.ModelName}}Schema, update{{.ModelName}}Schema } from '../data/dto/{{.HypenCaseName}}.dto';
import {{.ModelName}}Service from '../services/{{.HypenCaseName}}.service';
import {{.ModelName}}Mapper from '../data/mappers/{{.HypenCaseName}}.mapper';
import {{.ModelName}}Repository from '../data/repositories/{{.HypenCaseName}}.repository';
import { Profile } from '@shared/types';
import { AllowAdmin } from '@app/middlewares';

@JsonController('/admin/{{.HypenCaseName}}s')
@Service()
export default class {{.ModelName}}Controller {
  constructor(private {{.LowerModelName}}Repository: {{.ModelName}}Repository, private {{.LowerModelName}}Service: {{.ModelName}}Service, private {{.LowerModelName}}Mapper: {{.ModelName}}Mapper) {}

  @Get('/')
  @UseBefore(AllowAdmin())
  async fetchAll(): Promise<{{.ModelName}}Dto[]> {
    const {{.LowerModelName}}s = await this.{{.LowerModelName}}Repository.findAll();

    return {{.LowerModelName}}s.map({{.LowerModelName}} => this.{{.LowerModelName}}Mapper.toResponse({{.LowerModelName}}));
  }

  @Post('/')
  @UseBefore(AllowAdmin(), Validate(create{{.ModelName}}Schema))
  async create(@RequestUser() user: Profile, @Body() payload: Create{{.ModelName}}Dto): Promise<Required<{{.ModelName}}Dto>> {
    const entity = this.{{.LowerModelName}}Service.createFromDto(payload, user);

    await this.{{.LowerModelName}}Repository.save(entity);

    return this.{{.LowerModelName}}Mapper.toResponse(entity);
  }

  @Patch('/:id')
  @UseBefore(AllowAdmin(), Validate(update{{.ModelName}}Schema))
  async update(@RequestUser() user: Profile, @Param('id') id: string, @Body() payload: Update{{.ModelName}}Dto): Promise<Required<{{.ModelName}}Dto>> {
    const {{.LowerModelName}} = await this.{{.LowerModelName}}Repository.findOneById(id);

    if (!{{.LowerModelName}}) {
      throw new NotFoundError(`Email {{.LowerModelName}} ${id} cannot be found.`);
    }

    {{.LowerModelName}}.set(payload);

    await this.{{.LowerModelName}}Repository.save({{.LowerModelName}});

    return this.{{.LowerModelName}}Mapper.toResponse({{.LowerModelName}});
  }
}
